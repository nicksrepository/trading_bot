# src/database/db_utils.py

import asyncpg
from src.config import DB_HOST, DB_NAME, DB_USER, DB_PASSWORD

class DBPool:
    _pool = None
    
    @classmethod
    async def get_pool(cls):
        """
        Get or create a database connection pool.
        
        Returns:
            asyncpg.Pool: Database connection pool.
        """
        if cls._pool is None:
            cls._pool = await asyncpg.create_pool(
                host=DB_HOST,
                database=DB_NAME,
                user=DB_USER,
                password=DB_PASSWORD,
                min_size=5,
                max_size=20
            )
        return cls._pool

async def get_db_connection():
    """
    Get a database connection from the pool.
    
    Returns:
        asyncpg.Connection: Database connection.
    """
    return await DBPool.get_pool()

async def execute_query(query, *args):
    """
    Execute a database query.
    
    Args:
        query (str): SQL query to execute.
        *args: Arguments for the query.
    
    Returns:
        list: Query results.
    """
    async with await get_db_connection() as conn:
        return await conn.fetch(query, *args)

async def execute_many(query, args_list):
    """
    Execute a database query multiple times with different arguments.
    
    Args:
        query (str): SQL query to execute.
        args_list (list): List of argument tuples for the query.
    """
    async with await get_db_connection() as conn:
        await conn.executemany(query, args_list)
